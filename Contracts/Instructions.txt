
Right now Im using ERC721 standard, because ERC1155 was causing a lot of challenges for the implementation.


Polygon mainet:

USDC_contract_address = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174
BH_HouseT_contract_address = XXX
BH_MarketPlace_contract_address = XXX
BH_FungibleBlockhouse_contract_address = XXX

Polygon testnet (gassless upgradable):

USDC_contract_address = 0xeE36A294369bE640Ce839F195f430A461ab6DA89
BH_HouseT_contract_address = 0x8ed0E2165c0A451DF470339b922b7Df37f418155
BH_MarketPlace_contract_address = 0xaf34172B8B9ae54cE931e58c0afcFfFccd1f0fa2
BH_FungibleBlockhouse_contract_address = 0xF78938f97EAa5F6CA5E77825164585651fD7B513

  Testnet_only:
	Users can mint test USDC with USDC_contract_address.mint(to, USD_amount)


  Most important functions for HouseT tokens:
	At the end of every month, we have to do the following:
	1) Send all the USDC we got from our solar partners to the BH_HouseT_contract_address
	
	
	2) We need to tell the HouseT contract which solarT token is entilted to which amount:
	   It can be done with the function:
	     BH_HouseT.Add_HouseT_entilted_amount(HouseT_tokenID,amount)
	   Or you can do it in bacthes with a single call
	     BH_HouseT.Add_HouseT_entilted_amount_batch(HouseT_tokenIDs[],amounts[])
		 
	3) Optional, if we want we can distribute all the funds to the required addresses (alternatively, users can do it themeselves) with
	     BH_HouseT.distribute_profits_to_all_address()
		 
	
	New HouseT tokens can be minted with
		BH_HouseT.mint_HouseT(address to, metadata, bool require_whitelist)
		
	I also implemented some whitelist functions but lets say we dont care at the moment
	
	
  Most important functions for Marketplace:

	Listing:    - approve l with BH_HouseT.approve_listing(BH_MarketPlace_contract_address, HouseT_tokenID)
			    - Then can list with BH_MarketPlace.list_HouseT(Solar_tokenID, USDC_price)
			      (Dont forget to multiply the price by 10^18)
			   
	Buying:     - get price with BH_MarketPlace.HouseT_Price(HouseT_tokenID)
			    - approve spending with USDC_contract.approve(BH_MarketPlace_contract_address, USDC_price)
			    - then perform the transaction with BH_MarketPlace.buy_HouseT(Solar_tokenID)
			
	Place bid:  - approve spending with USDC_contract.approve(BH_MarketPlace_contract_address, bid_amount)
				- Place bid with place_bid(solar_tokenID, bid_amount)
				  (Dont forget to multiply the price by 10^18)
				  
				  
  Most important functions for FungibleBlockhouse
        Oracle: This contract relies on an external oracle that sets the panels value at all time, in order to know the value of FBH loan collateral
		At the end of every month, we have to update the panels value right before or at the same time as we update the holders entilted amount
		In fact, the panel will depreciate right after payment has been distributed
		Pricing should follow the model described at [https://docs.google.com/spreadsheets/d/1gfQ19BNi4Po1l5oKSO99wP28k5T5tMh8jvcCd_q1y7c]
		Updating panels values can be done with the function:
			BH_FungibleBlockhouse.update_HouseT_value(HouseT_tokenID,USD_value)
		Or you can do it in bacthes with a single call
			BH_FungibleBlockhouse.update_HouseT_value_batch(HouseT_tokenIDs[],USD_values[])
				
	FS borrowing: (HouseT staking)
				  - approve HouseT spending with BH_HouseT.approve_staking(BH_MarketPlace_contract_address, HouseT_tokenID)
				  - stake HouseT to get your FBH with BH_FungibleBlockhouse.stake_HouseT(HouseT_tokenID)

	HouseT unstake (FS loan repaiment) 
				  - Unstake HouseT with BH_FungibleBlockhouse.unstake_HouseT(Solar_tokenID)
				    -> The user will get back his HouseT plus the accumulated USDC directly (minus deducted interrest)
					
	PS: Value of FBH should stay at roughly one dollar due to arbitrage possibility. We (Blockhouse) could actually make quite some money from that.
	   
	  
	
	
  For other functions, see directly in the contract. Many function are also available in batch
